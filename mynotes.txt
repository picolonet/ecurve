Possible performance improvements:

1. In myfq.cu: mul by const, look at the fast version that is not working. Also from p2_mul.cu, try a 64 bit version of dev_mul_by_const.


Elliptic curve crypto notes:

Coding Plan:

1. List of constants needed. Routine in MNT4 class to create these constants. Create a class MNT4 consisting of
   static routines and constants for the MNT4 curve.
   Similar class and constants for the MNT6 curve.

2. G1Array class routine to create any necessary constants. 

3. Implement G1Array::Sum routine and debug against reference implementation.

G1Array :
   class that holds an array of (x,y) points. These are points on the curve. Read as input.

   Exposes a routine for "sum". Possibly other helper routines.
   Same class can use MNT4 or MNT6.

   Routine to convert between affine and jacobian.

G24Array :
   Class that holds an array of (x,y) points. Each of x and y are elements of the Fq2 field with coeffients x_a0 and
   x_a1, y_a0 and y_a1.

   Exposes a routine for "sum". Possibly other helper routines.
   We will use this only for MNT4.

   Routine to convert between affine and jacobian.

G26Array :
   Class that holds an array of (x,y) points. Each of x and y are elements of the Fq3 field with coeffients x_a0,
   x_a1, x_a2 and y_a0, y_a1, y_a2. Only for MNT6

   Exposes a routine for "sum". Possibly other helper routines.

   Routine to convert between affine and jacobian.


libff notes:
    fp.hpp contains code for the single q arithmetic (bigint).
    libff/algebra/fields/fp.tcc
    ./libff/algebra/curves/mnt753/mnt4753/mnt4753_init.cpp

./libff/algebra/curves/mnt753/mnt4753/mnt4753_init.cpp:    typedef bigint<mnt4753_q_limbs> bigint_q;


cuda CGBN notes:
   cgbn/core/core_mont_xmad.cu 
   cgbn/core/core.cu

core mont:
    /home/arunesh/github/cuda-play/cgbn/impl_cuda.cu:1039
   ../cgbn/core/core_singleton.cu
   /home/arunesh/github/cuda-play/cgbn/core/core_mont.cu:94
